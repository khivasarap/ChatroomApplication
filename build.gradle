// Helpful links that explain what the gradle file is doing

plugins {
    // Build Java: https://docs.gradle.org/current/userguide/building_java_projects.html
    id 'java'

    // https://docs.gradle.org/current/userguide/pmd_plugin.html#header
    id 'pmd'

    // https://docs.gradle.org/current/userguide/jacoco_plugin.html
    id 'jacoco'
}

group 'PDPCS5010'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories { mavenCentral() }

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    // https://mvnrepository.com/artifact/org.apache.commons/commons-csv
    compile group: 'org.apache.commons', name: 'commons-csv', version: '1.8'

    // Set this dependency if you want to use Apache Commons CLI library
    // https://mvnrepository.com/artifact/commons-cli/commons-cli/1.4
    compile group: 'commons-cli', name: 'commons-cli', version: '1.4'

    // Set this dependency if you want to use Apache Commons IO library
    // https://mvnrepository.com/artifact/commons-io/commons-io
    implementation group: 'commons-io', name: 'commons-io', version: '2.6'
    // https://mvnrepository.com/artifact/org.apache.commons/commons-text
    compile group: 'org.apache.commons', name: 'commons-text', version: '1.8'
    // https://mvnrepository.com/artifact/com.googlecode.lanterna/lanterna
    compile group: 'com.googlecode.lanterna', name: 'lanterna', version: '3.0.2'
    compile files(fileTree(dir: 'lib', includes: ['*.jar']))
    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.6'

}

jacoco {
    toolVersion = "0.8.4"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                // minimum percentage of code coverage
                minimum = 0.7
            }
        }

        rule {
            enabled = false
            element = 'CLASS'
            includes = ['org.gradle.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.3
            }
        }
    }
}

pmd {
    ignoreFailures = true
    pmdTest.enabled = true
    ruleSets = ["category/java/bestpractices.xml", "category/java/errorprone.xml", "category/java/codestyle.xml"
                //"java-basic",             //"java-braces",             //"java-strings",
    ]
}

task docs(type: Javadoc) {
    source = sourceSets.main.allJava
}

check.dependsOn jacocoTestCoverageVerification
jacocoTestReport.mustRunAfter test

task doAll {
    dependsOn build
    dependsOn test
    dependsOn check

    dependsOn javadoc

    println 'all done!'
}

task debuggingGradle { dependsOn check }

javadoc { doLast { println "file://$buildDir/docs/javadoc/index.html" } }

test { finalizedBy jacocoTestReport }

jacocoTestReport {
    doLast { println "file://$buildDir/jacocoHtml/index.html" }
}
